version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: mysql_tienda
    restart: always
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: tienda_db
      # No es necesario definir MYSQL_USER y MYSQL_PASSWORD para root
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_tienda:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql # Opcional: para inicializar la BD
    networks:
      - tienda_network
    healthcheck: # Agregamos un healthcheck para MySQL
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - "8082:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: root_password
    networks:
      - tienda_network
    depends_on:
      - db

  api:
    build:
      context: ./api # Directorio donde estará tu código de la API de Node.js
      dockerfile: Dockerfile.api # Archivo Dockerfile para la API
    container_name: tienda_api
    ports:
      - "8081:4000" # Puerto para la API de Node.js
    environment:
      DB_HOST: db # Nombre del servicio de la base de datos dentro de la red Docker
      DB_USER: root # Usamos root
      DB_PASSWORD: root_password # Usamos la contraseña de root
      DB_DATABASE: tienda_db
      DB_PORT: 3306
    depends_on:
      db:
        condition: service_healthy # Esperamos a que MySQL esté saludable
    networks:
      - tienda_network
    volumes:
      - ./api:/usr/src/app # Para desarrollo, montar el código local dentro del contenedor
      - /usr/src/app/node_modules # Evitar que se sobrescriban los módulos dentro del contenedor
    command: ["npm", "run", "dev"] # Comando para iniciar la API (ejemplo con nodemon para desarrollo)
    restart: always # Aseguramos que la API se reinicie si falla

  web:
    build:
      context: ./web # Directorio donde estará tu código de la aplicación web Next.js
      dockerfile: Dockerfile.web # Archivo Dockerfile para la web
    container_name: tienda_web
    ports:
      - "8080:3000" # Mapea el puerto 3000 del contenedor al 8080 de tu máquina local
    depends_on:
      - api
    networks:
      - tienda_network
    volumes:
      - ./web:/usr/src/app # Para desarrollo, montar el código local
      - /usr/src/app/node_modules # Evitar sobrescribir módulos
    command: ["npm", "run", "dev"]
    
volumes:
  mysql_data_tienda:

networks:
  tienda_network:
    driver: bridge
